<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:commands="clr-namespace:SP2013Access.Controls.PropertyGrid.Commands"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:editors="clr-namespace:SP2013Access.Controls.PropertyGrid.Editors"
                    xmlns:converters="clr-namespace:SP2013Access.Controls.Converters"
                    xmlns:pgconverters="clr-namespace:SP2013Access.Controls.PropertyGrid.Converters"
                    xmlns:propertyGrid="clr-namespace:SP2013Access.Controls.PropertyGrid"
                    xmlns:utilities="clr-namespace:SP2013Access.Controls.Utilities">

    <ResourceDictionary.MergedDictionaries>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:InverseBoolConverter x:Key="InverseBoolConverter" />
    <pgconverters:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
    <x:Static x:Key="EmptyString" Member="sys:String.Empty" />
    <Style x:Key="{x:Type editors:PropertyGridEditorComboBox}" TargetType="{x:Type editors:PropertyGridEditorComboBox}"
           BasedOn="{StaticResource {x:Type ComboBox}}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="UIElement.IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
                <Setter Property="Control.Background" Value="#00FFFFFF" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type editors:PropertyGridEditorCheckBox}" TargetType="{x:Type editors:PropertyGridEditorCheckBox}"
           BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="5,0,0,0" />
    </Style>
    <Style x:Key="{x:Type editors:PropertyGridEditorTextBox}" TargetType="{x:Type editors:PropertyGridEditorTextBox}"
           BasedOn="{StaticResource  {x:Type TextBox}}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="UIElement.IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type editors:PropertyGridEditorTextBlock}"
           TargetType="{x:Type editors:PropertyGridEditorTextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="TextBlock.Foreground" Value="#FF808080" />
    </Style>
    <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#FFFFB700" />
    <LinearGradientBrush x:Key="MouseOverBackgroundBrush" LinearGradientBrush.StartPoint="0,0"
                         LinearGradientBrush.EndPoint="0,1">
        <GradientStop GradientStop.Offset="0" GradientStop.Color="#FFFEFBF4" />
        <GradientStop GradientStop.Offset="0.19" GradientStop.Color="#FFFDE7CE" />
        <GradientStop GradientStop.Offset="0.39" GradientStop.Color="#FFFDDEB8" />
        <GradientStop GradientStop.Offset="0.39" GradientStop.Color="#FFFFCE6B" />
        <GradientStop GradientStop.Offset="0.79" GradientStop.Color="#FFFFDE9A" />
        <GradientStop GradientStop.Offset="1" GradientStop.Color="#FFFFEBAA" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="CheckedBorderBrush" SolidColorBrush.Color="#FFC29B29" />
    <LinearGradientBrush x:Key="CheckedBackgroundBrush" LinearGradientBrush.StartPoint="0,0" EndPoint="0,1">
        <GradientStop GradientStop.Offset="0" GradientStop.Color="#FFFFDCA0" />
        <GradientStop GradientStop.Offset="0.18" GradientStop.Color="#FFFFD692" />
        <GradientStop GradientStop.Offset="0.39" GradientStop.Color="#FFFFC45D" />
        <GradientStop GradientStop.Offset="1" GradientStop.Color="#FFFFD178" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="PressedBorderBrush" SolidColorBrush.Color="#FFC29B29" />
    <LinearGradientBrush x:Key="PressedBackgroundBrush" LinearGradientBrush.StartPoint="0,0" EndPoint="0,1">
        <GradientStop GradientStop.Offset="0" GradientStop.Color="#FFE3C085" />
        <GradientStop GradientStop.Offset="0.19" GradientStop.Color="#FFF4CC89" />
        <GradientStop GradientStop.Offset="0.36" GradientStop.Color="#FFF5C777" />
        <GradientStop GradientStop.Offset="0.36" GradientStop.Color="#FFF5BB56" />
        <GradientStop GradientStop.Offset="0.79" GradientStop.Color="#FFF4CE9A" />
        <GradientStop GradientStop.Offset="1" GradientStop.Color="#FFF3E28D" />
    </LinearGradientBrush>
    <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Setter.Property="Control.Background" Setter.Value="#00FFFFFF" />
        <Setter Setter.Property="Control.BorderBrush" Setter.Value="#00FFFFFF" />
        <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
        <Setter Setter.Property="FrameworkElement.FocusVisualStyle" Setter.Value="{x:Null}" />
        <Setter Setter.Property="FrameworkElement.Height" Setter.Value="22" />
        <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
        <Setter Setter.Property="ToolTipService.InitialShowDelay" Setter.Value="900" />
        <Setter Setter.Property="ToolTipService.ShowDuration" Setter.Value="20000" />
        <Setter Setter.Property="ToolTipService.BetweenShowDelay" Setter.Value="0" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type RadioButton}">
                    <Grid UIElement.SnapsToDevicePixels="True">
                        <Border Border.Name="OuterBorder" Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Border.Background="{TemplateBinding Control.Background}" Border.CornerRadius="2" />
                        <Border Border.Name="MiddleBorder" Border.BorderBrush="#00FFFFFF"
                                Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Border.Background="#00FFFFFF" Border.CornerRadius="2">
                            <Border Border.Name="InnerBorder" Border.BorderBrush="#00FFFFFF"
                                    Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                    Border.Background="#00FFFFFF" Border.CornerRadius="2"
                                    Border.Padding="{TemplateBinding Control.Padding}">
                                <StackPanel StackPanel.Name="StackPanel"
                                            FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                                    <ContentPresenter ContentPresenter.Name="Content"
                                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                                      FrameworkElement.Margin="1"
                                                      RenderOptions.BitmapScalingMode="NearestNeighbor"
                                                      FrameworkElement.VerticalAlignment="Center"
                                                      FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource MouseOverBackgroundBrush}"
                                    Setter.Property="Border.Background" />
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource MouseOverBorderBrush}"
                                    Setter.Property="Border.BorderBrush" />
                            <Setter Setter.TargetName="InnerBorder" Setter.Property="Border.BorderBrush"
                                    Setter.Value="#80FFFFFF" />
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                            <Setter Setter.TargetName="Content" Setter.Property="UIElement.Opacity" Setter.Value="0.5" />
                            <Setter Setter.TargetName="OuterBorder" Setter.Property="TextElement.Foreground"
                                    Setter.Value="#FF9E9E9E" />
                        </Trigger>
                        <Trigger Trigger.Property="ToggleButton.IsChecked" Trigger.Value="True">
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource CheckedBackgroundBrush}"
                                    Setter.Property="Border.Background" />
                            <Setter Setter.TargetName="OuterBorder" Setter.Value="{StaticResource CheckedBorderBrush}"
                                    Setter.Property="Border.BorderBrush" />
                            <Setter Setter.TargetName="InnerBorder" Setter.Property="Border.BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" LinearGradientBrush.StartPoint="0,0">
                                        <GradientStop GradientStop.Color="#FFE7CBAD" GradientStop.Offset="0" />
                                        <GradientStop GradientStop.Color="#FFF7D7B5" GradientStop.Offset="0.1" />
                                        <GradientStop GradientStop.Color="#FFFFD38C" GradientStop.Offset="0.36" />
                                        <GradientStop GradientStop.Color="#FFFFC75A" GradientStop.Offset="0.36" />
                                        <GradientStop GradientStop.Color="#FFFFEFA5" GradientStop.Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource PressedBackgroundBrush}"
                                    Setter.Property="Border.Background" />
                            <Setter Setter.TargetName="OuterBorder" Setter.Value="{StaticResource PressedBorderBrush}"
                                    Setter.Property="Border.BorderBrush" />
                            <Setter Setter.TargetName="InnerBorder" Setter.Property="Border.BorderBrush"
                                    Setter.Value="#00FFFFFF" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Condition.Property="ToggleButton.IsChecked" Condition.Value="True" />
                                <Condition Condition.Property="UIElement.IsMouseOver" Condition.Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Setter.TargetName="MiddleBorder" Setter.Property="Border.Background">
                                <Setter.Value>
                                    <LinearGradientBrush LinearGradientBrush.EndPoint="0,1"
                                                         LinearGradientBrush.StartPoint="0,0">
                                        <GradientStop GradientStop.Color="#40FFFEFE" GradientStop.Offset="0" />
                                        <GradientStop GradientStop.Color="#40FFFEFE" GradientStop.Offset="0.39" />
                                        <GradientStop GradientStop.Color="#20FFCE68" GradientStop.Offset="0.39" />
                                        <GradientStop GradientStop.Color="#20FFCE68" GradientStop.Offset="0.69" />
                                        <GradientStop GradientStop.Color="#10FFFFFF" GradientStop.Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
        <Setter Setter.Property="Control.Background" Setter.Value="#00FFFFFF" />
        <Setter Setter.Property="Control.BorderBrush" Setter.Value="#00FFFFFF" />
        <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
        <Setter Setter.Property="FrameworkElement.Height" Setter.Value="22" />
        <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
        <Setter Setter.Property="ToolTipService.InitialShowDelay" Setter.Value="900" />
        <Setter Setter.Property="ToolTipService.ShowDuration" Setter.Value="20000" />
        <Setter Setter.Property="ToolTipService.BetweenShowDelay" Setter.Value="0" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
                    <Grid UIElement.SnapsToDevicePixels="True">
                        <Border Border.Name="OuterBorder" Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Border.Background="{TemplateBinding Control.Background}" Border.CornerRadius="2" />
                        <Border Border.Name="MiddleBorder" Border.BorderBrush="#00FFFFFF"
                                Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Border.Background="#00FFFFFF" Border.CornerRadius="2">
                            <Border Border.Name="InnerBorder" Border.BorderBrush="#00FFFFFF"
                                    Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                    Border.Background="#00FFFFFF" Border.CornerRadius="2"
                                    Border.Padding="{TemplateBinding Control.Padding}">
                                <StackPanel StackPanel.Name="StackPanel"
                                            FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                                    <ContentPresenter ContentPresenter.Name="Content"
                                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                                      FrameworkElement.Margin="1"
                                                      RenderOptions.BitmapScalingMode="NearestNeighbor"
                                                      FrameworkElement.VerticalAlignment="Center"
                                                      FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource MouseOverBackgroundBrush}"
                                    Setter.Property="Border.Background" />
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource MouseOverBorderBrush}"
                                    Setter.Property="Border.BorderBrush" />
                            <Setter Setter.TargetName="InnerBorder" Setter.Property="Border.BorderBrush"
                                    Setter.Value="#80FFFFFF" />
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                            <Setter Setter.TargetName="Content" Setter.Property="UIElement.Opacity" Setter.Value="0.5" />
                            <Setter Setter.TargetName="OuterBorder" Setter.Property="TextElement.Foreground"
                                    Setter.Value="#FF9E9E9E" />
                        </Trigger>
                        <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                            <Setter Setter.TargetName="OuterBorder"
                                    Setter.Value="{StaticResource PressedBackgroundBrush}"
                                    Setter.Property="Border.Background" />
                            <Setter Setter.TargetName="OuterBorder" Setter.Value="{StaticResource PressedBorderBrush}"
                                    Setter.Property="Border.BorderBrush" />
                            <Setter Setter.TargetName="InnerBorder" Setter.Property="Border.BorderBrush"
                                    Setter.Value="#00FFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="GlyphBrush" SolidColorBrush.Color="#FF31347C" />
    <ControlTemplate x:Key="ExpanderToggleButton" ControlTemplate.TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Rectangle.Name="Rectangle" FrameworkElement.Margin="0,0,0,0" Shape.Fill="#00FFFFFF" />
            <Path Path.Name="Up_Arrow" FrameworkElement.HorizontalAlignment="Center"
                  FrameworkElement.VerticalAlignment="Center" Shape.Fill="{StaticResource GlyphBrush}"
                  Path.Data="M0,0L4,4 8,0z" UIElement.RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleTransform.ScaleX="1" ScaleTransform.ScaleY="1" />
                        <SkewTransform SkewTransform.AngleX="0" SkewTransform.AngleY="0" />
                        <RotateTransform RotateTransform.Angle="-90" />
                        <TranslateTransform TranslateTransform.X="0" TranslateTransform.Y="0" />
                    </TransformGroup>
                </UIElement.RenderTransform>
            </Path>
            <Path Path.Name="Down_Arrow" UIElement.Visibility="Collapsed" FrameworkElement.HorizontalAlignment="Center"
                  FrameworkElement.VerticalAlignment="Center" Shape.Fill="{StaticResource GlyphBrush}"
                  Path.Data="M0,4L4,0 8,4z" UIElement.RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleTransform.ScaleX="1" ScaleTransform.ScaleY="1" />
                        <SkewTransform SkewTransform.AngleX="0" SkewTransform.AngleY="0" />
                        <RotateTransform RotateTransform.Angle="135" />
                        <TranslateTransform TranslateTransform.X="0" TranslateTransform.Y="0" />
                    </TransformGroup>
                </UIElement.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Trigger.Property="ToggleButton.IsChecked" Trigger.Value="true">
                <Setter Setter.TargetName="Down_Arrow" Setter.Property="UIElement.Visibility" Setter.Value="Visible" />
                <Setter Setter.TargetName="Up_Arrow" Setter.Property="UIElement.Visibility" Setter.Value="Collapsed" />
                <Setter Setter.TargetName="Down_Arrow" Setter.Property="UIElement.OpacityMask" Setter.Value="#FF000000" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Setter.Property="Control.Padding" Setter.Value="0" />
        <Setter Setter.Property="Control.Background" Setter.Value="#FFF0F0F0" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition RowDefinition.Height="Auto" />
                            <RowDefinition RowDefinition.Name="ContentRow" RowDefinition.Height="*" />
                        </Grid.RowDefinitions>
                        <Border Border.Name="Border" Border.Background="{TemplateBinding Control.Background}"
                                Border.BorderBrush="#FFF0F0F0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition ColumnDefinition.Width="20" />
                                    <ColumnDefinition ColumnDefinition.Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Control.Template="{StaticResource ExpanderToggleButton}"
                                              FrameworkElement.OverridesDefaultStyle="True"
                                              ToggleButton.IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter Grid.Column="1" FrameworkElement.Margin="1"
                                                  ContentPresenter.RecognizesAccessKey="True"
                                                  ContentPresenter.ContentSource="Header" TextElement.FontWeight="Bold" />
                            </Grid>
                        </Border>
                        <Border Border.Name="ExpandSite" UIElement.Visibility="Collapsed" Grid.Row="1"
                                Border.Background="{x:Static SystemColors.ControlBrush}" Border.Padding="10 0 0 0">
                            <Border Border.BorderThickness="0" FrameworkElement.Margin="0" Border.Padding="0"
                                    FrameworkElement.VerticalAlignment="Stretch"
                                    FrameworkElement.HorizontalAlignment="Stretch">
                                <ContentPresenter
                                    FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                    FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    UIElement.Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Trigger.Property="Expander.IsExpanded" Trigger.Value="True">
                            <Setter Setter.TargetName="ExpandSite" Setter.Property="UIElement.Visibility"
                                    Setter.Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Setter.Property="Control.Padding" Setter.Value="10 0 0 0" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type Expander}">
                    <Grid>
                        <Border Border.Name="ExpandSite" UIElement.Visibility="Collapsed" Grid.Row="0"
                                Border.Padding="0 0 0 0">
                            <Border Border.BorderThickness="0" FrameworkElement.Margin="0" Border.Padding="0"
                                    FrameworkElement.VerticalAlignment="Stretch"
                                    FrameworkElement.HorizontalAlignment="Stretch">
                                <ContentPresenter
                                    FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    UIElement.Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Trigger.Property="Expander.IsExpanded" Trigger.Value="True">
                            <Setter Setter.TargetName="ExpandSite" Setter.Property="UIElement.Visibility"
                                    Setter.Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<ContextMenu x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type propertyGrid:PropertyGrid},ResourceId=SelectedObjectAdvancedOptionsMenu}">
        <MenuItem HeaderedItemsControl.Header="Reset Value" MenuItem.Command="commands:PropertyItemCommands.ResetValue" />
    </ContextMenu>-->
    <Style x:Key="{x:Type propertyGrid:PropertyItemBase}" TargetType="{x:Type propertyGrid:PropertyItemBase}">
        <Setter Setter.Property="Control.Background" Setter.Value="{x:Static SystemColors.WindowBrush}" />
        <Setter Setter.Property="FrameworkElement.Margin" Setter.Value="0,0,0,1" />
        <Setter Setter.Property="Control.VerticalContentAlignment" Setter.Value="Center" />
        <Setter Setter.Property="UIElement.SnapsToDevicePixels" Setter.Value="True" />
        <Setter Setter.Property="Control.IsTabStop" Setter.Value="False" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type propertyGrid:PropertyItemBase}">
                    <Border ContextMenuService.Placement="Bottom"
                            FrameworkElement.ContextMenu="{Binding AdvancedOptionsMenu,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=propertyGrid:PropertyGridView}}">
                        <Grid FrameworkElement.VerticalAlignment="Stretch"
                              FrameworkElement.HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    ColumnDefinition.Width="{Binding NameColumnWidth,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type propertyGrid:PropertyGridView}}}" />
                                <ColumnDefinition ColumnDefinition.Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition RowDefinition.Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border Border.Name="PART_Name" Border.Background="{TemplateBinding Control.Background}"
                                    FrameworkElement.Margin="0,0,1,0" FrameworkElement.VerticalAlignment="Stretch"
                                    FrameworkElement.HorizontalAlignment="Stretch">
                                <Grid FrameworkElement.Margin="2,2,2,2"
                                      FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition ColumnDefinition.Width="*" />
                                        <ColumnDefinition ColumnDefinition.Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid
                                        FrameworkElement.Margin="{Binding Level,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ExpandableObjectMarginConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition ColumnDefinition.Width="15" />
                                            <ColumnDefinition ColumnDefinition.Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton ToggleButton.Name="_expandableButton" Grid.Column="0"
                                                      Control.Template="{StaticResource ExpanderToggleButton}"
                                                      FrameworkElement.OverridesDefaultStyle="True"
                                                      ToggleButton.IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                                      UIElement.Visibility="{Binding IsExpandable,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <TextBlock TextBlock.Name="_text" Grid.Column="1"
                                                   FrameworkElement.HorizontalAlignment="Stretch"
                                                   FrameworkElement.VerticalAlignment="Center"
                                                   TextBlock.TextTrimming="CharacterEllipsis"
                                                   TextBlock.Text="{Binding DisplayName,RelativeSource={RelativeSource TemplatedParent}}"
                                                   UIElement.IsEnabled="{Binding IsReadOnly,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=propertyGrid:PropertyGridView},Converter={StaticResource InverseBoolConverter}}" />
                                    </Grid>
                                    <Grid Grid.Column="1" FrameworkElement.HorizontalAlignment="Right"
                                          FrameworkElement.Margin="5,0,5,0"
                                          utilities:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
                                          Visibility="{Binding ShowAdvancedOptions,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=propertyGrid:PropertyGridView},Converter={StaticResource BooleanToVisibilityConverter}}"
                                          FrameworkElement.ContextMenu="{Binding AdvancedOptionsMenu,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=propertyGrid:PropertyGridView}}">
                                        <Image Image.Name="_optionsImage" FrameworkElement.Width="11"
                                               FrameworkElement.Height="11"
                                               FrameworkElement.ToolTip="{Binding AdvancedOptionsTooltip,RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </Grid>
                            </Border>
                            <Border Border.Name="PART_Editor" Grid.Row="0" Grid.Column="1"
                                    Border.Background="{TemplateBinding Control.Background}"
                                    KeyboardNavigation.DirectionalNavigation="None"
                                    FrameworkElement.VerticalAlignment="Stretch"
                                    FrameworkElement.HorizontalAlignment="Stretch">
                                <ContentControl ContentControl.Name="PART_ValueContainer"
                                                ContentControl.Content="{TemplateBinding propertyGrid:PropertyItemBase.Editor}"
                                                UIElement.Focusable="False" Control.IsTabStop="False"
                                                FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                UIElement.IsEnabled="{Binding IsReadOnly,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=propertyGrid:PropertyGridView},Converter={StaticResource InverseBoolConverter}}" />
                            </Border>
                            <Expander Expander.Name="_propertyExpander" Grid.ColumnSpan="2" Grid.Column="0"
                                      Grid.Row="1"
                                      Expander.IsExpanded="{TemplateBinding propertyGrid:PropertyItemBase.IsExpanded}"
                                      FrameworkElement.Style="{StaticResource PropertyExpanderStyle}"
                                      UIElement.IsEnabled="True">
                                <propertyGrid:PropertyItemsControl
                                    Name="PART_PropertyItemsControl"
                                    IsTabStop="False" Focusable="False"
                                    ItemsSource="{Binding Properties,RelativeSource={RelativeSource TemplatedParent}}"
                                    ItemContainerStyle="{Binding PropertyContainerStyle,RelativeSource={RelativeSource TemplatedParent}}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </propertyGrid:PropertyItemsControl>
                            </Expander>
                        </Grid>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                            <Setter Setter.TargetName="PART_Name" Setter.Property="Border.Background"
                                    Setter.Value="#FFCED4DF" />
                        </Trigger>
                        <Trigger Trigger.Property="propertyGrid:PropertyItemBase.IsSelected" Trigger.Value="True">
                            <Setter Setter.TargetName="PART_Name" Setter.Property="Border.Background"
                                    Setter.Value="#FF43577B" />
                            <Setter Setter.TargetName="PART_Name" Setter.Property="TextElement.Foreground"
                                    Setter.Value="#FFFFFFFF" />
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                            <Setter Setter.TargetName="PART_ValueContainer"
                                    Setter.Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                    Setter.Property="Control.Foreground" />
                            <Setter Setter.TargetName="_text"
                                    Setter.Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                    Setter.Property="TextBlock.Foreground" />
                        </Trigger>
                        <Trigger Trigger.Property="Validation.HasError" Trigger.Value="True">
                            <Setter
                                Setter.Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors).CurrentItem.ErrorContent}"
                                Setter.Property="FrameworkElement.ToolTip" />
                        </Trigger>
                        <Trigger Trigger.SourceName="_expandableButton" Trigger.Property="UIElement.Visibility"
                                 Trigger.Value="Visible">
                            <Setter Setter.Property="UIElement.Focusable" Setter.Value="False" />
                        </Trigger>
                        <DataTrigger Value="{x:Static propertyGrid:StringConstants.Local}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/Local11.png" />
                        </DataTrigger>
                        <DataTrigger Value="{x:Static propertyGrid:StringConstants.Resource}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/Resource11.png" />
                        </DataTrigger>
                        <DataTrigger DataTrigger.Value="{x:Static propertyGrid:StringConstants.Databinding}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/Database11.png" />
                        </DataTrigger>
                        <DataTrigger DataTrigger.Value="{x:Static propertyGrid:StringConstants.Inheritance}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/Inheritance11.png" />
                        </DataTrigger>
                        <DataTrigger DataTrigger.Value="{x:Static propertyGrid:StringConstants.StyleSetter}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/Style11.png" />
                        </DataTrigger>
                        <DataTrigger DataTrigger.Value="{x:Static propertyGrid:StringConstants.AdvancedProperties}"
                                     DataTrigger.Binding="{Binding ElementName=_optionsImage,Path=ToolTip}">
                            <Setter Setter.TargetName="_optionsImage" Setter.Property="Image.Source"
                                    Setter.Value="../Images/AdvancedProperties11.png" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type propertyGrid:PropertyGridView}" TargetType="{x:Type propertyGrid:PropertyGridView}">
        <Style.Resources>
            <ResourceDictionary>
                <!--<pgconverters:SelectedObjectConverter x:Key="objectConverter" />-->
                <pgconverters:IsCategoryExpandedConverter x:Key="IsCategoryExpandedConverter" />
            </ResourceDictionary>
        </Style.Resources>
        <Setter Setter.Property="Control.Background" Setter.Value="#FFBCC7D8" />
        <Setter Setter.Property="Control.BorderBrush" Setter.Value="#FF43577B" />
        <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type propertyGrid:PropertyGridView}">
                    <Border Border.Background="{TemplateBinding Control.Background}"
                            Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Border.BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid Margin="{TemplateBinding Control.Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition RowDefinition.Height="Auto" />
                                <RowDefinition RowDefinition.Height="Auto" />
                                <RowDefinition />
                                <RowDefinition RowDefinition.Height="5" />
                                <RowDefinition RowDefinition.Height="Auto" />
                            </Grid.RowDefinitions>
                            <StackPanel StackPanel.Orientation="Horizontal" FrameworkElement.Margin="6,2,0,4"
                                        UIElement.Visibility="{Binding ShowTitle,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}">
                                <!--<TextBlock TextBlock.Text="{TemplateBinding pg:PropertyGrid.SelectedObjectTypeName}" TextBlock.FontWeight="Bold" />
                                <TextBlock TextBlock.Text="{TemplateBinding pg:PropertyGrid.SelectedObjectName}" FrameworkElement.Margin="5,0,0,0" />-->
                            </StackPanel>
                            <Grid Grid.Name="toolsContainer" Grid.Row="1" FrameworkElement.Margin="4,0,4,4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition ColumnDefinition.Width="Auto" />
                                    <ColumnDefinition ColumnDefinition.Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Name="sortButtonContainer" FrameworkElement.Margin="4"
                                      UIElement.Visibility="{Binding ShowSortOptions,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel StackPanel.Orientation="Horizontal" FrameworkElement.Margin="1">
                                        <RadioButton FrameworkElement.VerticalAlignment="Center"
                                                     FrameworkElement.Style="{StaticResource OptionsToggleButtonStyle}"
                                                     FrameworkElement.ToolTip="Categorized"
                                                     ToggleButton.IsChecked="{Binding IsCategorized,RelativeSource={RelativeSource TemplatedParent}}">
                                            <Image Image.Source="./../Images/Categorize16.png"
                                                   FrameworkElement.Width="16" FrameworkElement.Height="16" />
                                        </RadioButton>
                                        <RadioButton FrameworkElement.VerticalAlignment="Center"
                                                     FrameworkElement.Style="{StaticResource OptionsToggleButtonStyle}"
                                                     FrameworkElement.ToolTip="Alphabetical"
                                                     ToggleButton.IsChecked="{Binding IsCategorized,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource InverseBoolConverter},Mode=OneWay}">
                                            <Image Image.Source="./../Images/SortAscending16.png"
                                                   FrameworkElement.Width="16" FrameworkElement.Height="16" />
                                        </RadioButton>
                                    </StackPanel>
                                </Grid>
                                <Border Border.Name="searchBoxContainer" Grid.Column="1"
                                        FrameworkElement.Margin="4,4,0,4" Border.Background="#FFFFFFFF"
                                        Border.BorderBrush="#FF808080" Border.BorderThickness="1"
                                        UIElement.Visibility="{Binding ShowSearchBox,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition ColumnDefinition.Width="*" />
                                            <ColumnDefinition ColumnDefinition.Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <TextBox Name="_txtFilter" Background="#00FFFFFF"
                                                 Text="{Binding Filter,RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}">
                                            <FrameworkElement.Style>
                                                <Style TargetType="{x:Type Control}">
                                                    <Setter Setter.Property="Control.BorderThickness" Setter.Value="0" />
                                                    <Style.Triggers>
                                                        <Trigger Trigger.Property="UIElement.IsMouseOver"
                                                                 Trigger.Value="True">
                                                            <Setter Setter.Property="Control.BorderThickness"
                                                                    Setter.Value="1" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </FrameworkElement.Style>
                                        </TextBox>
                                        <Button Grid.Column="1"
                                                ButtonBase.Command="commands:PropertyGridCommands.ClearFilter"
                                                FrameworkElement.Style="{StaticResource ClearFilterButtonStyle}"
                                                FrameworkElement.HorizontalAlignment="Left">
                                            <Image Image.Source="./../Images/ClearFilter16.png"
                                                   FrameworkElement.Width="16" FrameworkElement.Height="16" />
                                        </Button>
                                    </Grid>
                                </Border>
                            </Grid>
                            <Grid Grid.Row="2" Panel.Background="{x:Static SystemColors.WindowBrush}">
                                <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <propertyGrid:PropertyItemsControl Name="PART_PropertyItemsControl"
                                                                       IsTabStop="False" Focusable="False"
                                                                       Background="{x:Static SystemColors.ControlBrush}"
                                                                       VerticalAlignment="Top"
                                                                       ItemsSource="{Binding Properties,RelativeSource={RelativeSource TemplatedParent}}"
                                                                       ItemContainerStyle="{Binding PropertyContainerStyle,RelativeSource={RelativeSource TemplatedParent}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.GroupStyle>
                                            <GroupStyle>
                                                <GroupStyle.ContainerStyle>
                                                    <Style TargetType="{x:Type GroupItem}">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate>
                                                                    <Border>
                                                                        <Expander
                                                                            Style="{StaticResource ExpanderStyle}"
                                                                            Header="{Binding Name}"
                                                                            IsExpanded="{Binding Path=Items,Mode=OneWay,Converter={StaticResource IsCategoryExpandedConverter}}">
                                                                            <ItemsPresenter />
                                                                        </Expander>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </GroupStyle.ContainerStyle>
                                            </GroupStyle>
                                        </ItemsControl.GroupStyle>
                                    </propertyGrid:PropertyItemsControl>
                                </ScrollViewer>
                                <!--<Thumb Thumb.Name="PART_DragThumb" FrameworkElement.HorizontalAlignment="Left"
                                       FrameworkElement.Width="5" FrameworkElement.Margin="6,0,0,0"
                                       FrameworkElement.Cursor="SizeWE">
                                    <Control.Template>
                                        <ControlTemplate>
                                            <Border Border.Background="#00FFFFFF" />
                                        </ControlTemplate>
                                    </Control.Template>
                                </Thumb>-->
                            </Grid>
                            <GridSplitter FrameworkElement.Height="3" Grid.Row="3"
                                          FrameworkElement.HorizontalAlignment="Stretch"
                                          UIElement.Visibility="{Binding ShowSummary,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <StackPanel Grid.Row="4" FrameworkElement.Margin="0,0,0,5"
                                        UIElement.Visibility="{Binding ShowSummary,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooleanToVisibilityConverter}}">
                                <TextBlock TextBlock.Padding="2 2 2 0" TextBlock.FontWeight="Bold"
                                           TextBlock.Text="{Binding SelectedPropertyItem.DisplayName,RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock TextBlock.Padding="5 2 2 0" TextBlock.TextWrapping="WrapWithOverflow"
                                           TextBlock.Text="{Binding SelectedPropertyItem.Description,RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Condition.SourceName="searchBoxContainer"
                                           Condition.Property="UIElement.Visibility" Condition.Value="Collapsed" />
                                <Condition Condition.SourceName="sortButtonContainer"
                                           Condition.Property="UIElement.Visibility" Condition.Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter Setter.TargetName="toolsContainer" Setter.Property="UIElement.Visibility"
                                    Setter.Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>